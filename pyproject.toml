[build-system]
requires = [
    "setuptools",
    "wheel",
    "uv",
]
build-backend = "setuptools.build_meta"

[project]
name = "diabetic-readmission-risk-prediction"
version = "0.1.0"
description = "Diabetic Readmission Risk Prediction using Machine Learning"
readme = "README.md"
requires-python = ""
license = { text = "MIT" }
authors = [
    { name = "Jonathan Agustin", email = "jonathan.agustin@example.com" },
    { name = "Zack Robertson", email = "zack.robertson@example.com" },
    { name = "Lisa Vo", email = "lisa.vo@example.com" },
]
keywords = [
    "mlops",
    "diabetes",
    "prediction",
    "healthcare",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiohttp",
    "autogluon.tabular",
    "cleanlab",
    "dvc",
    "dvclive",
    "fastapi",
    "feast",
    "feast",
    "imblearn",
    "joblib",
    "matplotlib",
    "numpy",
    "openai",
    "optuna",
    "pandas",
    "passlib",
    "pdf2image",
    "pillow",
    "prometheus-client",
    "pyarrow",
    "python-jose",
    "python-multipart",
    "python-pptx",
    "redis",
    "requests",
    "scikit-learn",
    "seaborn",
    "tenacity",
    "tensorflow",
    "uv",
    "uvicorn",
    "wandb",
]
[project.optional-dependencies]
dev = [
    "pytest",
    "black",
    "flake8",
    "isort",
    "mypy",
    "pylint",
    "pydocstyle",
    "bandit",
    "codecov",
    "types-requests",
    "types-setuptools",
    "types-toml",
    "types-urllib3",
    "types-python-dateutil",
    "types-PyYAML",
    "types-scipy",
    "types-dataclasses",
    "types-PyQt5",
    "types-PyQt6",
    "types-PySide2",
    "types-pyarrow",
    "types-pandas",
    "types-pydantic",
    "types-joblib",
    "types-psutil",
    "types-opencv-python",
    "types-lxml",
    "types-pyqt6",
    "types-pyside2",
    "types-matplotlib",
    "types-openpyxl",
    "types-aiohttp",
    "types-typing-extensions",
    "types-cryptography",
    "types-yaml",
    "ucimlrepo",
]

[tool.black]
line-length = 120
target-version = [
    "py37",
    "py38",
    "py39",
    "py310",
    "py311",
]

[tool.flake8]
max-line-length = 120
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "site-packages",
    "build",
    "dist",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
line_length = 120
known_third_party = [
    "feast",
    "yaml",
]
skip_glob = [
    ".venv-*/*",
]

[tool.pylint]
disable = [
    "missing-docstring",
    "invalid-name",
    "line-too-long",
    "too-few-public-methods",
    "import-error",
]
max-line-length = 120

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = false
exclude = "\\.venv-.*"

[tool.coverage.run]
source = [
    "pipeline/src",
    "pipeline/models",
]

[tool.coverage.report]
show_missing = true

[tool.uv]
environments = [
    "sys_platform == 'linux'",
]

[tool.ruff]
exclude = [
    "__pypackages__",
    "_build",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".git",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".uv_cache",
    ".venv-*",
    ".venv",
    ".vscode",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "F",
]
ignore = [
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = [
    "ALL",
]
unfixable = [
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
