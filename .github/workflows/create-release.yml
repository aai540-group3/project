name: Create Release
on:
  repository_dispatch:
    types:
      - create-release
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Type of version bump"
        required: true
        default: "minor"
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Cache Apt Packages
        uses: actions/cache@v4.0.2
        with:
          path: |
            /var/cache/apt/archives/*.deb
            /var/lib/apt/lists/*
            ! /var/lib/apt/lists/partial
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/generate-pdfs.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Get Latest Release Tag
        id: get_latest_release
        run: |
          latest_release=$(gh release list -L 1 --exclude-pre-releases | awk '{print $1}')
          echo "latest_release_tag=$latest_release" >> $GITHUB_ENV

      - name: Calculate Hashes of Deliverables
        id: calculate_hashes
        run: |
          echo "Calculating hashes of deliverables..."
          deliverable1_hash=$(sha256sum Final_Project_Team_3_Deliverable_1.pdf | awk '{print $1}')
          deliverable2_hash=$(sha256sum Final_Project_Team_3_Deliverable_2.mp4 | awk '{print $1}')
          deliverable3_hash=$(sha256sum Final_Project_Team_3_Deliverable_3.zip | awk '{print $1}')
          echo "deliverable1_hash=$deliverable1_hash" >> $GITHUB_ENV
          echo "deliverable2_hash=$deliverable2_hash" >> $GITHUB_ENV
          echo "deliverable3_hash=$deliverable3_hash" >> $GITHUB_ENV

      - name: Check if Deliverables Changed
        id: check_changes
        if: env.latest_release_tag != ''
        run: |
          echo "Fetching hashes from the latest release..."
          latest_deliverable1_hash=$(gh release view $latest_release_tag --json assets | jq -r '.assets[] | select(.name=="Final_Project_Team_3_Deliverable_1.pdf").label')
          latest_deliverable2_hash=$(gh release view $latest_release_tag --json assets | jq -r '.assets[] | select(.name=="Final_Project_Team_3_Deliverable_2.mp4").label')
          latest_deliverable3_hash=$(gh release view $latest_release_tag --json assets | jq -r '.assets[] | select(.name=="Final_Project_Team_3_Deliverable_3.zip").label')

          # Ensure that variables are set
          if [ -z "$latest_deliverable1_hash" ] || [ -z "$latest_deliverable2_hash" ] || [ -z "$latest_deliverable3_hash" ]; then
            echo "One or more previous hashes are missing. Assuming changes."
            echo "changed=true" >> $GITHUB_ENV
          elif [ "$deliverable1_hash" = "$latest_deliverable1_hash" ] && \
               [ "$deliverable2_hash" = "$latest_deliverable2_hash" ] && \
               [ "$deliverable3_hash" = "$latest_deliverable3_hash" ]; then
            echo "No changes detected in deliverables."
            echo "changed=false" >> $GITHUB_ENV
          else
            echo "Changes detected in deliverables."
            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Bump Version
        id: tag_version
        if: env.changed == 'true' || env.latest_release_tag == ''
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: ${{ github.event.inputs.bump_type || 'minor' }}
          WITH_V: true
          RELEASE_BRANCHES: main

      - name: Generate SBOM
        if: env.changed == 'true' || env.latest_release_tag == ''
        uses: anchore/sbom-action@v0.17.2
        with:
          format: cyclonedx-json
          output-file: sbom.json

      - name: Generate Attestations
        id: attestation
        if: env.changed == 'true' || env.latest_release_tag == ''
        uses: actions/attest@v1.4.1
        with:
          show-summary: true
          subject-path: |
            Final_Project_Team_3_Deliverable_1.pdf
            Final_Project_Team_3_Deliverable_2.mp4
            Final_Project_Team_3_Deliverable_3.zip
            sbom.json
          predicate-type: "https://slsa.dev/provenance/v0.2"
          predicate: |
            {
              "buildType": "https://github.com/actions/runner",
              "builder": {
                "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              },
              "invocation": {
                "configSource": {
                  "uri": "git+https://github.com/${{ github.repository }}.git",
                  "revision": "${{ github.sha }}",
                  "entryPoint": ".github/workflows/create-release.yml"
                }
              },
              "materials": [
                {
                  "uri": "git+https://github.com/${{ github.repository }}.git",
                  "digest": {
                    "sha256": "${{ github.sha }}"
                  }
                }
              ]
            }

      - name: Release
        id: create_release
        if: env.changed == 'true' || env.latest_release_tag == ''
        uses: softprops/action-gh-release@v2.0.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Final Project Deliverables ${{ steps.tag_version.outputs.new_tag }}
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            Final_Project_Team_3_Deliverable_1.pdf#${{ env.deliverable1_hash }}
            Final_Project_Team_3_Deliverable_2.mp4#${{ env.deliverable2_hash }}
            Final_Project_Team_3_Deliverable_3.zip#${{ env.deliverable3_hash }}
            sbom.json
            ${{ steps.attestation.outputs.bundle-path }}
          body_path: templates/RELEASE.md

      - name: Print Release Outputs
        if: env.changed == 'true' || env.latest_release_tag == ''
        run: |
          echo "Release URL: ${{ steps.create_release.outputs.url }}"
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          echo "Assets: ${{ steps.create_release.outputs.assets }}"
