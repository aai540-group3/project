name: Validate AWS IAM policies in Terraform templates using Policy Validator

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

env:
  AWS_ROLE: arn:aws:iam::864899865811:role/GitHub-Actions-PolicyValidator
  REGION: us-east-1
  TEMPLATE_PATH: 'terraform/**/*.tf'
  ACTIONS: 's3:PutObject,s3:GetObject,s3:ListBucket,dynamodb:GetItem,dynamodb:PutItem,dynamodb:DeleteItem,iam:*,access-analyzer:*,organizations:*'
  RESOURCES: >-
    arn:aws:s3:::terraform-state-bucket-eeb973f4/*,
    arn:aws:s3:::terraform-state-bucket-eeb973f4,
    arn:aws:dynamodb:us-east-1:864899865811:table/terraform-state-lock-eeb973f4,
    arn:aws:s3:::mlops-artifacts-aai540-group3/*,
    arn:aws:s3:::mlops-artifacts-aai540-group3,
    arn:aws:iam::864899865811:policy/AdministratorAccessPolicy,
    arn:aws:iam::864899865811:policy/AccessAnalyzerPolicy
  REFERENCE_POLICY: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::terraform-state-bucket-eeb973f4",
            "arn:aws:s3:::terraform-state-bucket-eeb973f4/*",
            "arn:aws:s3:::mlops-artifacts-aai540-group3",
            "arn:aws:s3:::mlops-artifacts-aai540-group3/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:864899865811:table/terraform-state-lock-eeb973f4"
        },
        {
          "Effect": "Allow",
          "Action": "iam:*",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "access-analyzer:*",
            "iam:GetRole",
            "iam:ListRoles",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
          ],
          "Resource": "*"
        }
      ]
    }
  REFERENCE_POLICY_TYPE: 'INLINE'

jobs:
  policy-validator:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
    name: Policy Validator checks for AWS IAM policies
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.REGION }}

      - name: Run AWS AccessAnalyzer ValidatePolicy check
        id: validate-policy
        uses: aws-actions/terraform-aws-iam-policy-validator@v1
        with:
          policy-check-type: "VALIDATE_POLICY"
          template-path: ${{ env.TEMPLATE_PATH }}
          region: ${{ env.REGION }}

      - name: Print the result for ValidatePolicy check
        if: always()
        run: echo "${{ steps.validate-policy.outputs.result }}"

      - name: Run AWS AccessAnalyzer CheckAccessNotGranted check
        id: check-access-not-granted
        uses: aws-actions/terraform-aws-iam-policy-validator@v1
        with:
          policy-check-type: "CHECK_ACCESS_NOT_GRANTED"
          template-path: ${{ env.TEMPLATE_PATH }}
          actions: ${{ env.ACTIONS }}
          resources: ${{ env.RESOURCES }}
          region: ${{ env.REGION }}

      - name: Print the result for CheckAccessNotGranted check
        if: always()
        run: echo "${{ steps.check-access-not-granted.outputs.result }}"

      - name: Run AWS AccessAnalyzer CheckNoNewAccess check
        id: check-no-new-access
        uses: aws-actions/terraform-aws-iam-policy-validator@v1
        with:
          policy-check-type: "CHECK_NO_NEW_ACCESS"
          template-path: ${{ env.TEMPLATE_PATH }}
          reference-policy: ${{ env.REFERENCE_POLICY }}
          reference-policy-type: ${{ env.REFERENCE_POLICY_TYPE }}
          region: ${{ env.REGION }}

      - name: Print the result CheckNoNewAccess check
        if: always()
        run: echo "${{ steps.check-no-new-access.outputs.result }}"

      - name: Run AWS AccessAnalyzer CheckNoPublicAccess check
        id: check-no-public-access
        uses: aws-actions/terraform-aws-iam-policy-validator@v1
        with:
          policy-check-type: "CHECK_NO_PUBLIC_ACCESS"
          template-path: ${{ env.TEMPLATE_PATH }}
          region: ${{ env.REGION }}

      - name: Print the result for CheckNoPublicAccess check
        if: always()
        run: echo "${{ steps.check-no-public-access.outputs.result }}"
