name: 'Continuous Integration and Continuous Deployment'

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
 TF_LOG: DEBUG

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
      with:
        terraform_version: '1.9.5'

    - name: Terraform Init (No Backend)
      run: terraform init -backend=false

    - name: Setup and Initialize Terraform Backend
      run: |
        # Initialize Terraform without backend
        terraform init -backend=false

        # Check if S3 bucket exists and create if it doesn't
        if ! aws s3api head-bucket --bucket ${{ secrets.TF_VAR_STATE_BUCKET_NAME }} 2>/dev/null; then
          echo "Creating S3 bucket"
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="state_bucket_name=${{ secrets.TF_VAR_STATE_BUCKET_NAME }}" \
            -target=aws_s3_bucket.terraform_state
        fi

        # Check if DynamoDB table exists and create if it doesn't
        if ! aws dynamodb describe-table --table-name ${{ secrets.TF_VAR_DYNAMODB_TABLE_NAME }} 2>/dev/null; then
          echo "Creating DynamoDB table"
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="dynamodb_table_name=${{ secrets.TF_VAR_DYNAMODB_TABLE_NAME }}" \
            -target=aws_dynamodb_table.terraform_locks
        fi

        echo "Initializing Terraform with backend"
        terraform init -reconfigure \
          -backend-config="bucket=${{ secrets.TF_VAR_STATE_BUCKET_NAME }}" \
          -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
          -backend-config="region=${{ secrets.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_VAR_DYNAMODB_TABLE_NAME }}"

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="state_bucket_name=${{ secrets.TF_VAR_STATE_BUCKET_NAME }}" \
          -var="dynamodb_table_name=${{ secrets.TF_VAR_DYNAMODB_TABLE_NAME }}"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="state_bucket_name=${{ secrets.TF_VAR_STATE_BUCKET_NAME }}" \
          -var="dynamodb_table_name=${{ secrets.TF_VAR_DYNAMODB_TABLE_NAME }}"

    - name: Cleanup
      if: always()
      run: |
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        aws configure set aws_access_key_id ""
        aws configure set aws_secret_access_key ""
        aws configure set aws_session_token ""