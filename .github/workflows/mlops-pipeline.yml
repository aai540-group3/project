name: MLOps Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "conf/**"
      - "dvc.yaml"
      - "params.yaml"
      - "dvc.lock"
      - "requirements.txt"
      - ".github/workflows/mlops-pipeline.yml"
  pull_request:
    branches:
      - main
    paths:
      - "src/**"
      - "conf/**"
      - "dvc.yaml"
      - "params.yaml"
      - "dvc.lock"
      - "requirements.txt"
      - ".github/workflows/mlops-pipeline.yml"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  run-mlops-pipeline:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DATASETS_REMOTE: ${{ secrets.DATASETS_REMOTE }}
      DVC_STUDIO_TOKEN: ${{ secrets.DVC_STUDIO_TOKEN }}
      MODELS_REMOTE: ${{ secrets.MODELS_REMOTE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Cache Python dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure DVC
        run: |
          dvc init
          dvc config core.autostage true
          dvc config hydra.enabled true
          dvc config studio.url https://studio.iterative.ai
          dvc remote add -f datasets_remote $DATASETS_REMOTE -d
          dvc remote add -f models_remote $MODELS_REMOTE
          dvc remote modify datasets_remote region $AWS_DEFAULT_REGION
          dvc remote modify models_remote region $AWS_DEFAULT_REGION
          dvc remote list

      - name: Cache DVC cache directory
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: .dvc/cache
          key: ${{ runner.os }}-dvc-cache-${{ hashFiles('dvc.lock') }}
          restore-keys: |
            ${{ runner.os }}-dvc-cache-

      - name: Pull data and models from DVC remotes
        run: dvc pull

      - name: Run DVC pipeline
        run: dvc repro

      - name: Push data and models to DVC remotes
        if: always()
        run: dvc push

      - name: Configure Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and push changes
        if: always()
        id: commit_and_push
        continue-on-error: true
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Add files only if they exist
          [ -f dvc.lock ] && git add dvc.lock
          [ -d dvclive ] && git add dvclive
          [ -d dvclive_evaluate ] && git add dvclive_evaluate
          [ -f reports/metrics.json ] && git add reports/metrics.json

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update DVC artifacts and metrics"
            git pull
            git push
          fi

      - name: Create Pull Request if push failed
        if: failure() && steps.commit_and_push.outcome == 'failure'
        run: |
          # Configure git
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Create a new branch
          NEW_BRANCH="auto/update-dvc-artifacts-${{ github.run_id }}"
          git checkout -b $NEW_BRANCH

          # Add files only if they exist
          [ -f dvc.lock ] && git add dvc.lock
          [ -d dvclive ] && git add dvclive
          [ -d dvclive_evaluate ] && git add dvclive_evaluate
          [ -f reports/metrics.json ] && git add reports/metrics.json

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit. Skipping PR creation."
          else
            git commit -m "Update DVC artifacts and metrics"
            git push origin $NEW_BRANCH

            # Create a pull request using GitHub CLI
            gh pr create \
              --title "Update DVC artifacts and metrics" \
              --body "This PR updates the DVC artifacts and metrics." \
              --label "automated-pr" \
              --base ${{ github.ref_name }} \
              --head $NEW_BRANCH
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
