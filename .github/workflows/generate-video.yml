name: Generate Video

on:
  push:
    paths:
      - ".github/workflows/generate-video.yml"
      - "Final_Project_Team_3_Deliverable_2.pptx"
      - "scripts/pptx2video.py"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  generate-video:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REPO_ROOT: ${{ github.workspace }}
      BASE_NAME: Final_Project_Team_3_Deliverable_2
      REPO_NAME: ${{ secrets.REPO_NAME }}
      EVENT_TYPE: create-release

    steps:
      - name: Check out main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1
          lfs: true

      - name: Set Environment Variables
        run: |
          echo "PPTX_FILE=$REPO_ROOT/$BASE_NAME.pptx" >> $GITHUB_ENV
          echo "PDF_FILE=$REPO_ROOT/$BASE_NAME.pdf" >> $GITHUB_ENV
          echo "MP4_FILE=$REPO_ROOT/$BASE_NAME.mp4" >> $GITHUB_ENV
          echo "ASSETS_DIR=$REPO_ROOT/video-assets" >> $GITHUB_ENV
          echo "ASSETS_PDF=$REPO_ROOT/video-assets/$BASE_NAME.pdf" >> $GITHUB_ENV
          echo "ASSETS_MP4=$REPO_ROOT/video-assets/$BASE_NAME.mp4" >> $GITHUB_ENV

      - name: Print Environment Variables
        run: |
          echo "REPO_ROOT: $REPO_ROOT"
          echo "PPTX_FILE: $PPTX_FILE"
          echo "PDF_FILE: $PDF_FILE"
          echo "MP4_FILE: $MP4_FILE"
          echo "ASSETS_DIR: $ASSETS_DIR"
          echo "ASSETS_PDF: $ASSETS_PDF"
          echo "ASSETS_MP4: $ASSETS_MP4"
          echo "Current directory: $(pwd)"
          ls -la

      - name: Check for PowerPoint file
        run: |
          if [ ! -f "$PPTX_FILE" ]; then
            echo "::error::PPTX file not found: $PPTX_FILE"
            exit 1
          fi

      - name: Cache Apt Packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install \
              ffmpeg \
              libreoffice \
              poppler-utils \
              bc

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('scripts/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Delete Old Files
        run: |
          rm -rf "$MP4_FILE"
          rm -rf "$PDF_FILE"
          rm -rf "$ASSETS_DIR"
          mkdir -p "$ASSETS_DIR"

      - name: Generate Video
        run: python scripts/pptx2video.py "$PPTX_FILE"

      - name: Check Video
        run: |
          if [ ! -f "$ASSETS_MP4" ]; then
            echo "::error::Video generation failed. MP4 file not found in $ASSETS_DIR."
            exit 1
          fi

      - name: Copy PDF to Top-Level Repo Directory
        run: |
          if [ -f "$ASSETS_PDF" ]; then
            cp "$ASSETS_PDF" "$REPO_ROOT"
            echo "Copied PDF to Top-Level Repo Directory"
          else
            echo "::error::PDF file not found in $ASSETS_DIR directory"
            exit 1
          fi

      - name: Move MP4 to Top-Level Repo Directory
        run: |
          if [ -f "$ASSETS_MP4" ]; then
            mv "$ASSETS_MP4" "$REPO_ROOT"
            echo "Moved MP4 to Top-Level Repo Directory"
          else
            echo "::error::MP4 file not found in $ASSETS_DIR directory"
            exit 1
          fi

      - name: Get Video Duration
        run: |
          duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$MP4_FILE")
          minutes=$(echo "$duration / 60" | bc)
          seconds=$(printf "%.0f" $(echo "$duration % 60" | bc))
          DURATION="${minutes}m ${seconds}s"
          echo "DURATION=$DURATION" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Push to Remote
        run: |
          git add "$PDF_FILE" "$MP4_FILE"
          git commit --allow-empty -m "$DURATION out of 15 minutes"
          git pull origin main
          git push origin main

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.AAI540_GROUP3_DISPATCH_TOKEN }}
          repository: ${{ secrets.REPO_NAME }}
          event-type: ${{ env.EVENT_TYPE }}
