# dvc.yaml

params:
  - params.yaml
  - dvclive/params.yaml
stages:
  setup_virtualenv:
    cmd:
      - python3 -m virtualenv .venv

  install_dependencies:
    cmd:
      - source .venv/bin/activate
      - pip install uv
      - uv pip install -r requirements.txt
    deps:
      - requirements.txt
      - .venv/

  fix_gpu_issue:
    cmd:
      - .venv/bin/python scripts/fix-nvidia-gpu.py
    deps:
      - scripts/fix-nvidia-gpu.py
      - .venv/

  data_ingestion:
    cmd:
      - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python data/ingestion.py
    deps:
      - data/ingestion.py
    params:
      - dataset.name
      - data.raw_file
    outs:
      - data/raw/data.csv

  data_cleaning:
    cmd:
      - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python data/cleaning.py
    deps:
      - data/cleaning.py
      - ${data.raw_file}
    params:
      - data.raw_file
      - data.interim_file
    outs:
      - ${data.interim_file}

  feature_engineering:
    cmd:
      - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python data/build_features.py
    deps:
      - data/build_features.py
      - ${data.interim_file}
    params:
      - data.interim_file
      - data.featured_file
      - feature_engineering
    outs:
      - ${data.featured_file}

  data_splitting:
    cmd:
      - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python data/splitting.py
    deps:
      - data/splitting.py
      - ${data.featured_file}
    params:
      - data.featured_file
      - data.train_file
      - data.test_file
      - training.split
    outs:
      - ${data.train_file}
      - ${data.test_file}

  model_preprocessing:
    foreach: ${models.names}
    do:
      cmd:
        - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python models/${item}/preprocessing.py
          model=${item}
      deps:
        - models/${item}/preprocessing.py
        - ${data.train_file}
      params:
        - data.train_file
        - model.${item}
      outs:
        - ${data.processed}/${item}/train_preprocessed.csv

  model_training:
    foreach: ${models.names}
    do:
      cmd:
        - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python models/${item}/train.py
          model=${item}
      deps:
        - models/${item}/train.py
        - ${data.processed}/${item}/train_preprocessed.csv
      params:
        - data.processed
        - model.${item}
      outs:
        - ${models.output}/${item}/model.pkl:
            persist: true

  model_evaluation:
    foreach: ${models.names}
    do:
      cmd:
        - source .venv/bin/activate
        - CONFIG_PATH=$(pwd)/conf CONFIG_NAME=config .venv/bin/python models/${item}/evaluate.py
          model=${item}
      deps:
        - models/${item}/evaluate.py
        - ${models.output}/${item}/model.pkl
        - ${data.test_file}
      params:
        - model.${item}
      metrics:
        - ${reports.metrics}/${item}_metrics.json:
            cache: false

artifacts:
  logistic_regression_model:
    path: models/logistic_regression/model.pkl
    type: model
  autogluon_model:
    path: models/autogluon/model.pkl
    type: model
  logistic_regression_metrics:
    path: reports/metrics/logistic_regression_metrics.json
    type: metrics
  autogluon_metrics:
    path: reports/metrics/autogluon_metrics.json
    type: metrics
metrics:
  - ${dvclive}/metrics.json
  - dvclive/metrics.json
plots:
  - ${dvclive}/plots/metrics:
      x: step
  - ${dvclive}/plots/images
  - dvclive/plots/metrics:
      x: step
  - dvclive/plots/images
